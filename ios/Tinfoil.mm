#import "Tinfoil.h"
#import <Tinfoil/Tinfoil-Swift.h> // auto-generated Swift-to-ObjC header

@implementation Tinfoil {
  TinfoilBridge *_bridge;          // <— keep one Swift object
}

RCT_EXPORT_MODULE() // mandatory macro

- (instancetype)init
{
  if ((self = [super init])) {
    _bridge = [TinfoilBridge new];
  }
  return self;
}

#pragma mark - <NativeTinfoilSpec> methods generated by codegen

- (void)initialize:(JS::NativeTinfoil::InitConfig &)config
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject
{
  [_bridge initialize:config.apiKey()
           githubRepo:config.githubRepo()
           enclaveURL:config.enclaveURL()
           completion:^(NSError *err) {
             if (err) {
               reject(@"init_error", err.localizedDescription, err);
             } else {
               resolve(nil);    // JS promise ⇢ fulfilled
             }
           }];
}

- (void)chatCompletion:(NSString *)model
              messages:(NSArray *)messages
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject
{
  [_bridge chatCompletion:model
                  messages:messages
                completion:^(NSString * _Nullable text,
                             NSError  * _Nullable error)
  {
    if (error) {
      reject([NSString stringWithFormat:@"%ld", (long)error.code],
             error.localizedDescription,
             error);
    } else {
      resolve(text ?: @"");
    }
  }];
}

- (void)chatCompletionStream:(NSString *)model
                    messages:(NSArray *)messages
                     onOpen:(RCTResponseSenderBlock)onOpen
                    onChunk:(RCTResponseSenderBlock)onChunk
                     onDone:(RCTResponseSenderBlock)onDone
                    onError:(RCTResponseSenderBlock)onError
{
  [_bridge chatCompletionStream:model
                       messages:messages
                         onOpen:onOpen
                        onChunk:onChunk
                         onDone:onDone
                        onError:onError];
}

- (void)verify:(RCTResponseSenderBlock)onCodeVerificationComplete
onRuntimeVerificationComplete:(RCTResponseSenderBlock)onRuntimeVerificationComplete
onSecurityCheckComplete:(RCTResponseSenderBlock)onSecurityCheckComplete
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject
{
  [_bridge verifyOnCodeVerificationComplete:onCodeVerificationComplete
                  onRuntimeVerificationComplete:onRuntimeVerificationComplete
                  onSecurityCheckComplete:onSecurityCheckComplete
                                   completion:^(NSDictionary * _Nullable result,
                                                NSError      * _Nullable error)
  {
    if (error) {
      reject([NSString stringWithFormat:@"%ld", (long)error.code],
             error.localizedDescription,
             error);
    } else {
      resolve(result ?: @{});
    }
  }];
}

#pragma mark - TurboModule boiler-plate

- (std::shared_ptr<facebook::react::TurboModule>)
    getTurboModule:(const facebook::react::ObjCTurboModule::InitParams &)params
{
  return std::make_shared<facebook::react::NativeTinfoilSpecJSI>(params);
}
@end
